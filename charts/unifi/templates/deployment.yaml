apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "unifi.fullname" . }}
  labels:
    {{- include "unifi.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "unifi.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "unifi.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "unifi.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .extraEnvironmentVars -}}
        env:
          {{- include "vault.extraEnvironmentVars" .Values | nindent 10 }}
        {{{- end }}}
        ports:
        - name: controller
          containerPort: 8080
          protocol: TCP
        - name: discovery
          containerPort: 10001
          protocol: UDP
        - name: https-gui
          containerPort: 8443
          protocol: TCP
        - name: stun
          containerPort: 3478
          protocol: UDP
        livenessProbe:
          httpGet:
            path: /status
            port: https-gui
            scheme: HTTPS
          initialDelaySeconds: 30
        readinessProbe:
          httpGet:
            path: /status
            port: https-gui
            scheme: HTTPS
          initialDelaySeconds: 15
        volumeMounts:
        - mountPath: /unifi/data
          name: unifi-data
          subPath: {{ ternary "data" (printf "%s/%s" .Values.persistence.subPath "data") (empty .Values.persistence.subPath) }}
        - mountPath: /unifi/log
          name: unifi-data
          subPath: {{ ternary "log" (printf "%s/%s" .Values.persistence.subPath "log") (empty .Values.persistence.subPath) }}
        - mountPath: /unifi/cert
          name: unifi-data
          subPath: {{ ternary "cert" (printf "%s/%s" .Values.persistence.subPath "cert") (empty .Values.persistence.subPath) }}
        - mountPath: /unifi/init.d
          name: unifi-data
          subPath: {{ ternary "init.d" (printf "%s/%s" .Values.persistence.subPath "init.d") (empty .Values.persistence.subPath) }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: unifi-data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "unifi.fullname" . }}
      {{- else }}
        emptyDir: {}
      {{ end }}
